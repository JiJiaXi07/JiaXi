<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xiaoshu.dao.GoodsMapper">
  <resultMap id="BaseResultMap" type="com.xiaoshu.entity.Goods">
    <!--
      WARNING - @mbg.generated
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="typeid" jdbcType="INTEGER" property="typeid" />
    <result column="code" jdbcType="VARCHAR" property="code" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="price" jdbcType="INTEGER" property="price" />
    <result column="status" jdbcType="VARCHAR" property="status" />
    <result column="createtime" jdbcType="TIMESTAMP" property="createtime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <select id="findAll" resultType="com.xiaoshu.entity.GoodsVo" parameterType="com.xiaoshu.entity.GoodsVo">
  	SELECT g.*,gt.typename as gtname FROM goods g,goodstype gt
  	<where>
  		 g.typeid=gt.id
  		 <if test="name!=null and name!=''">
  		 	and g.name like '%${name}%'
  		 </if>
  		 <if test="typeid!=null and typeid!=0">
  		 	and g.typeid = #{typeid}
  		 </if>
  	</where>
  	ORDER BY g.id asc
  </select>
  <select id="findById" resultType="com.xiaoshu.entity.Goods" parameterType="com.xiaoshu.entity.Goods">
  	select * from goods where code = #{code}
  </select>
  
  <select id="findGoods" resultType="com.xiaoshu.entity.Goods" parameterType="com.xiaoshu.entity.Goods">
  	select DISTINCT status from goods
  </select>
  
  <select id="getTj" resultType="com.xiaoshu.entity.GoodsVo">
  	SELECT COUNT(*) num,gt.typename AS gtname FROM goods g,goodstype gt WHERE g.typeid=gt.id GROUP BY gt.id
  </select>
</mapper>